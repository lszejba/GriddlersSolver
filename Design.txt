Griddlers Solver Design Document

1. Goal of project
Solving Griddler provided as input to application
1.1 Sub goal 1
Returning information that input has/hasn't deterministic solution
1.2 Sub goal 2
Providing list of steps leading to solution (so it can be processed by another application to show the whole process step-by-step)

2. Input format
TODO: provide list of processed formats

3. Classes
Board
+ rows
+ columns
+ rowGroupsSizes (int[])
+ columnGroupsSizes (int[])
-- rowLogicalGroups (LogicalGroup[])
-- columnLogicalGroups (LogicalGroup[])

Field
+ rowNumber
+ columnNumber
+ state (EMPTY / FULL / UNKNOWN(default) ) - this might be later expanded with secondary colors
TODO:
* remove LogicalGroup from class
* create interfaces ISender, IReceiver
* add inheritance from IReceiver
* move register/unregister from Field to MessageQueue class

PhysicalRow
+ type (ROW / COLUMN)
+ number
+ contents (Field[])
- logicalGroups (LogicalGroup[])

LogicalGroup
+ size
- candidates (Field[])
-- previous (LogicalGroup)
-- next (LogicalGroup)

MessageQueue
- messages (Message[])
- AddMessage(Message) - check messages if one with given recipient is present, don't add this one if true

Message
DESCRIPTION: class for inner communication between other classes. Sent by ISender to MessageQueue, which passes it to IReceiver and run certain method on it.
+ sender (Field)
+ recipient (LogicalGroup)

ISender
DESCRIPTION: Interface for classes to send information to IReceivers when state of class (or its contents) change and action is required on IReceiver side.

IReceiver

Event
DESCRIPTION: Class for outside communication when certain conditions are met. Events are collected by EventsManager.

EventsManager
